{
    "mainTitle": "Ant Colony",
    "instructions": {
        "title": "Instructions",
        "begin": "Commencer"
    },
    "editor": {
        "title": "Éditeur",
        "reset": "Recharger",
        "play": "Jouer"
    },
    "starterCode": {
        "title": "Code de départ",
        "templateCode": "On vous donne ce code pour commencer:"
    },
    "game": "Jeu",
    "levelComplete": "Niveau réussi !",

    "DistanceToFood": {
        "instructions": [
            "Pour se repérer dans son environement, la fourmi a besoin de connaître la distance avec les objets qui l'entourent, tel que la nourriture. Dans ce niveau, tu dois créer une fonction `distance_euclidienne` qui calcule la distance euclidienne entre deux points dans le monde virtuel.",
            "La fonction doit accepter 4 arguments: `fourmi_x` et `fourmi_y` sont les coordonnées `x` et `y` de la fourmi dans le monde, `objet_x` et `objet_y` sont celles de l'objet dont on veut connaitre la distance. La fonction doit retourner la valeur de la distance euclidienne.",
            "#### Notes",
            "La distance euclidienne dans un espace à deux dimensions est donnée par:",
            "![sqrt((x_1 - x_2)^2 + (y_1 - y_2)^2)](https://wikimedia.org/api/rest_v1/media/math/render/svg/617b88d273f6cec8288acc4a071c855ce441e49b)",
            "Tu peux utiliser la fonction `Math.sqrt(x)`, qui retourne la racine carrée du nombre `x` qui lui est passé en argument.",
            "#### Syntaxe",
            "",
            "- Déclarer une variable: `var maVariable = 42;`",
            "- Appeler une fonction: `maFonction(argument1, argument2)`. Par exemple, `var racine = Math.sqrt(maVariable);`",
            "- Retourner une valeur: `return maVariable;`",
            "",
            "#### Objectif",
            "Dans ce niveau, les trois fourmis AI vont utiliser ta fonction pour chercher la nourriture la plus proche, puis vont aller la manger. Le niveau est gagné si **chacune** des fourmis a pu manger un fruit.",
            "Attention: quand une fourmi a mangé un fruit, elle va automatiquement en chercher un autre. Il est donc important que ta fonction soit correcte, pour que chaque fourmi se dirige directement vers le fruit le plus proche avant que les autres fourmis ne viennent le manger."
        ],
        "starter_code": [
            "function distance_euclidienne(fourmi_x, fourmi_y, objet_x, objet_y) {",
            "    // Ton code ici!",
            "};"
        ]
    },
    "DirectionOfFood": {
        "instructions": "TODO: instructions pour DirectionOfFood",
        "starter_code": [
            "function angle_objet(fourmi, objet) {",
            "    // Calcule l'angle entre (fourmi.x, fourmi.y)",
            "    // et (objet.x, objet.y), en radians.",
            "};"
        ]
    },
    "IsFoodEdible": {
        "instructions": [
            "Les fourmis ne peuvent pas simplement manger tout ce qui leur passe sous le nez. Si elles ne font pas attention, elles pourraient s'empoisonner !",
            "Dans ce niveau, certains fruits sont **empoisonnés** (`fruit.poison`) ou trop vieux (`fruit.age`, en nombre de jours).",
            "Vous devez écrire une fonction qui permet à la fourmi de décider si elle va manger un fruit ou pas. Un fruit est commestible si:",
            "- Il n'est **pas** empoisonné,",
            "- **Et** il est agé de un jour ou moins",
            "",
            "Votre fonction doit vérifier ces deux conditions et retourner `true` si elles sont valides, ou `false` sinon.",
            "",
            "#### Syntaxe",
            "- Vérifier si une variable est plus petite qu'un nombre: `var estJeune = personne.age < 25;`.",
            "  La variable `estJeune` contiendra soit `true`, soit `false` selon le résultat de la comparaison.",
            "- Prendre le contraire d'un booléen (_non_): `var estVieux = !estJeune;`",
            "- Vérifier si deux conditions sont toutes les deux vraies (_et_): `var estCommestible = estJeune && pasPoison;`",
            "- Retourner vrai: `return true;`",
            "- Retourner faux: `return false;`",
            "- Faire quelque chose seulement si une condition est vraie:",
            "```",
            "if (maCondition) {",
            "    // Éxécuter ce code seulement si la condition est vraie",
            "} else {",
            "    // Sinon, exécuter ce code",
            "}",
            "```",
            "  La partie à partir de `else` est optionnelle.",

            "",
            "#### Objectif",
            "Le niveau est réussi si la fourmi peut manger tous les fruits commestibles sans s'empoisonner."
        ],
        "starter_code": [
            "function est_commestible(fruit) {",
            "    // Un fruit qui n'est pas empoisonné (fruit.poison)",
            "    // et agé de moins de deux jours (fruit.age)",
            "    // est commestible.",
            "};"
        ]
    },
    "ChooseClosestFood": {
        "instructions": [
            "Il y a beaucoup de choses à manger dans ce niveau ! Aidez les fourmis à choisir l'option la plus proche parmi tous ces fruits.",
            "Parcourez la liste `listeObjets` de fruits pour trouver le plus proche. La fonction `distance_euclidienne` est fournie pour vous aider à calculer la distance.",
            "Votre fonction doit retourner l'objet le plus proche (l'objet lui-même, **pas la distance**).",
            "",
            "#### Syntaxe",
            "",
            "- Appeler une fonction: `var distance = distance_euclidienne(maFourmi, monObjet);`",
            "- Vérifier si un nombre est plus petit qu'un autre:",
            "```",
            "if (nombre1 < nombre2) {",
            "    // Faire quelque chose si nombre1 est plus petit que nombre2",
            "}",
            "```",
            "- Faire quelque chose pour chaque élément d'une liste:",
            "```",
            "for (var fruit of listeFruits) {",
            "    // Faire quelque chose avec chaque fruit",
            "}",
            "```",
            "",
            "#### Objectif",
            "Le niveau est réussi quand tous les fruits ont été mangés.",
            ""
        ],
        "starter_code": [
            "function distance_euclidienne(fourmi, objet) {",
            "    var d1 = fourmi.x - objet.x;",
            "    var d2 = fourmi.y - objet.y;",
            "    return Math.sqrt(d1 * d1 + d2 * d2);",
            "};",
            "",
            "function choisir_plus_proche(fourmi, listeObjets) {",
            "    // Utilises la fonction distance_euclidienne pour trouver l'objet",
            "    // le plus proche dans la list donnée listeObjets.",
            "    // Retourne l'object le plus proche.",
            "};"
        ]
    }
}
